
  /*const [showCreateRoom, setShowCreateRoom] = useState(false);
  const [roomSettings, setRoomSettings] = useState({
    maxPlayers: 4,
    language: 'English',
    timePerTurn: 60,
    rounds: 5,
  });

  const toggleCreateRoom = () => setShowCreateRoom((prev) => !prev);

  const handleSettingsChange = (e) => {
    const { name, value } = e.target;
    setRoomSettings({ ...roomSettings, [name]: value });
  };

  const handleCreateRoom = () => {
    // Logique pour créer une salle avec les paramètres spécifiés
    console.log('Room created with settings:', roomSettings);
  };

  return (
    <div className="flex justify-center items-center min-h-screen bg-gray-100 p-6">
      <div className="w-full max-w-md p-6 bg-white rounded-lg shadow-md">
        {!showCreateRoom ? (
          <>
            <h2 className="text-2xl font-bold mb-4">Join a Room</h2>
            <button
              onClick={toggleCreateRoom}
              className="w-full bg-blue-500 text-white p-3 rounded-md hover:bg-blue-600 transition mb-4"
            >
              Create Room
            </button>
            <button className="w-full bg-green-500 text-white p-3 rounded-md hover:bg-green-600 transition">
              Join Room
            </button>
          </>
        ) : (
          <>
            <h2 className="text-2xl font-bold mb-4">Create a Room</h2>
            <div className="space-y-3">
              <label className="block">
                <span className="text-gray-700">Number of Players</span>
                <select
                  name="maxPlayers"
                  value={roomSettings.maxPlayers}
                  onChange={handleSettingsChange}
                  className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50"
                >
                  {[2, 3, 4, 5, 6, 7, 8].map((num) => (
                    <option key={num} value={num}>
                      {num}
                    </option>
                  ))}
                </select>
              </label>

              <label className="block">
                <span className="text-gray-700">Language</span>
                <select
                  name="language"
                  value={roomSettings.language}
                  onChange={handleSettingsChange}
                  className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50"
                >
                  <option value="English">English</option>
                  <option value="French">French</option>
                  <option value="Spanish">Spanish</option>
                </select>
              </label>

              <label className="block">
                <span className="text-gray-700">Time per Turn (seconds)</span>
                <input
                  type="number"
                  name="timePerTurn"
                  value={roomSettings.timePerTurn}
                  onChange={handleSettingsChange}
                  className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50"
                />
              </label>

              <label className="block">
                <span className="text-gray-700">Number of Rounds</span>
                <input
                  type="number"
                  name="rounds"
                  value={roomSettings.rounds}
                  onChange={handleSettingsChange}
                  className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50"
                />
              </label>

              <button
                onClick={handleCreateRoom}
                className="w-full bg-blue-500 text-white p-3 rounded-md hover:bg-blue-600 transition mt-4"
              >
                Create Room
              </button>
              <button
                onClick={toggleCreateRoom}
                className="w-full bg-gray-500 text-white p-3 rounded-md hover:bg-gray-600 transition mt-2"
              >
                Back
              </button>
            </div>
          </>
        )}
      </div>
    </div>
  );*/

  /*const [playerName, setPlayerName] = useState('');
  const [language, setLanguage] = useState('English');
  const [showJoinOptions, setShowJoinOptions] = useState(false);
  const [showCreateOptions, setShowCreateOptions] = useState(false);
  const [roomKey, setRoomKey] = useState('');
  const [roomSettings, setRoomSettings] = useState({
    maxPlayers: 4,
    timePerTurn: 60,
    rounds: 5,
  });

  const handleCreateRoom = () => {
    console.log('Room created with settings:', roomSettings, 'Player:', playerName, 'Language:', language);
  };

  const handleJoinRoom = () => {
    if (roomKey) {
      console.log('Joining room with key:', roomKey, 'Player:', playerName, 'Language:', language);
    } else {
      console.log('Joining a random room. Player:', playerName, 'Language:', language);
    }
  };

  return (
    <div className="flex justify-center items-center min-h-screen bg-gray-100 p-6">
      <div className="w-full max-w-md p-6 bg-white rounded-lg shadow-md">
        <h2 className="text-2xl font-bold mb-4 text-center">Welcome to the Game</h2>
        
        <label className="block mb-4">
          <span className="text-gray-700">Player Name</span>
          <input
            type="text"
            value={playerName}
            onChange={(e) => setPlayerName(e.target.value)}
            placeholder="Enter your name"
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50"
          />
        </label>

        <label className="block mb-4">
          <span className="text-gray-700">Language</span>
          <select
            value={language}
            onChange={(e) => setLanguage(e.target.value)}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50"
          >
            <option value="English">English</option>
            <option value="French">French</option>
            <option value="Spanish">Spanish</option>
          </select>
        </label>

        {!showJoinOptions && !showCreateOptions && (
          <div className="flex gap-4">
            <button
              onClick={() => setShowJoinOptions(true)}
              className="w-full bg-green-500 text-white p-3 rounded-md hover:bg-green-600 transition"
            >
              Join Room
            </button>
            <button
              onClick={() => setShowCreateOptions(true)}
              className="w-full bg-blue-500 text-white p-3 rounded-md hover:bg-blue-600 transition"
            >
              Create Room
            </button>
          </div>
        )}

        {showJoinOptions && (
          <div className="mt-4">
            <h3 className="text-xl font-semibold mb-2">Join a Room</h3>
            <label className="block mb-4">
              <span className="text-gray-700">Room Key (Optional)</span>
              <input
                type="text"
                value={roomKey}
                onChange={(e) => setRoomKey(e.target.value)}
                placeholder="Enter room key or leave blank for random"
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50"
              />
            </label>
            <button
              onClick={handleJoinRoom}
              className="w-full bg-green-500 text-white p-3 rounded-md hover:bg-green-600 transition"
            >
              Join Room
            </button>
            <button
              onClick={() => setShowJoinOptions(false)}
              className="w-full bg-gray-500 text-white p-3 rounded-md hover:bg-gray-600 transition mt-2"
            >
              Back
            </button>
          </div>
        )}

        {showCreateOptions && (
          <div className="mt-4">
            <h3 className="text-xl font-semibold mb-2">Create a Room</h3>

            <label className="block mb-4">
              <span className="text-gray-700">Number of Players</span>
              <select
                name="maxPlayers"
                value={roomSettings.maxPlayers}
                onChange={(e) => setRoomSettings({ ...roomSettings, maxPlayers: e.target.value })}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50"
              >
                {[2, 3, 4, 5, 6, 7, 8].map((num) => (
                  <option key={num} value={num}>
                    {num}
                  </option>
                ))}
              </select>
            </label>

            <label className="block mb-4">
              <span className="text-gray-700">Time per Turn (seconds)</span>
              <input
                type="number"
                value={roomSettings.timePerTurn}
                onChange={(e) => setRoomSettings({ ...roomSettings, timePerTurn: e.target.value })}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50"
              />
            </label>

            <label className="block mb-4">
              <span className="text-gray-700">Number of Rounds</span>
              <input
                type="number"
                value={roomSettings.rounds}
                onChange={(e) => setRoomSettings({ ...roomSettings, rounds: e.target.value })}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50"
              />
            </label>

            <button
              onClick={handleCreateRoom}
              className="w-full bg-blue-500 text-white p-3 rounded-md hover:bg-blue-600 transition"
            >
              Create Room
            </button>
            <button
              onClick={() => setShowCreateOptions(false)}
              className="w-full bg-gray-500 text-white p-3 rounded-md hover:bg-gray-600 transition mt-2"
            >
              Back
            </button>
          </div>
        )}
      </div>
    </div>
  );*/
  /*const [playerName, setPlayerName] = useState('');
  const [language, setLanguage] = useState('English');
  const [roomKey, setRoomKey] = useState('');
  const [showCreateSettings, setShowCreateSettings] = useState(false);
  const [roomSettings, setRoomSettings] = useState({
    maxPlayers: 4,
    timePerTurn: 60,
    rounds: 5,
  });

  const handleJoinRoom = () => {
    if (roomKey) {
      console.log('Joining room with key:', roomKey, 'Player:', playerName, 'Language:', language);
    } else {
      console.log('Joining a random room:', 'Player:', playerName, 'Language:', language);
    }
  };

  const handleCreateRoom = () => {
    console.log('Room created with settings:', roomSettings, 'Player:', playerName, 'Language:', language);
  };

  return (
    <div className="flex justify-center items-center min-h-screen bg-gray-100 p-6">
      <div className="w-full max-w-2xl space-y-6">
        
        <div className="bg-white p-6 rounded-lg shadow-md">
          <h2 className="text-xl font-bold mb-4">Profile Setup</h2>
          <label className="block mb-4">
            <span className="text-gray-700">Player Name</span>
            <input
              type="text"
              value={playerName}
              onChange={(e) => setPlayerName(e.target.value)}
              placeholder="Enter your name"
              className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50"
            />
          </label>
          <label className="block">
            <span className="text-gray-700">Language</span>
            <select
              value={language}
              onChange={(e) => setLanguage(e.target.value)}
              className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50"
            >
              <option value="English">English</option>
              <option value="French">French</option>
              <option value="Spanish">Spanish</option>
            </select>
          </label>
        </div>

        <div className="bg-white p-6 rounded-lg shadow-md">
          <h2 className="text-xl font-bold mb-4">Join or Create Room</h2>
          
          <div className="mb-6">
            <h3 className="text-lg font-semibold">Join Room</h3>
            <label className="block mb-4">
              <span className="text-gray-700">Room Key (Optional)</span>
              <input
                type="text"
                value={roomKey}
                onChange={(e) => setRoomKey(e.target.value)}
                placeholder="Enter room key or leave blank for random"
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50"
              />
            </label>
            <button
              onClick={handleJoinRoom}
              className="w-full bg-green-500 text-white p-3 rounded-md hover:bg-green-600 transition"
            >
              Join Room
            </button>
          </div>

          <div>
            <h3 className="text-lg font-semibold">Create Room</h3>
            <button
              onClick={() => setShowCreateSettings(!showCreateSettings)}
              className="w-full bg-blue-500 text-white p-3 rounded-md hover:bg-blue-600 transition mb-4"
            >
              {showCreateSettings ? 'Hide Settings' : 'Create Room'}
            </button>

            {showCreateSettings && (
              <div className="space-y-4">
                <label className="block">
                  <span className="text-gray-700">Number of Rounds</span>
                  <input
                    type="number"
                    value={roomSettings.rounds}
                    onChange={(e) => setRoomSettings({ ...roomSettings, rounds: e.target.value })}
                    className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50"
                  />
                </label>
                <label className="block">
                  <span className="text-gray-700">Max Players</span>
                  <input
                    type="number"
                    value={roomSettings.maxPlayers}
                    onChange={(e) => setRoomSettings({ ...roomSettings, maxPlayers: e.target.value })}
                    className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50"
                  />
                </label>
                <label className="block">
                  <span className="text-gray-700">Time per Turn (seconds)</span>
                  <input
                    type="number"
                    value={roomSettings.timePerTurn}
                    onChange={(e) => setRoomSettings({ ...roomSettings, timePerTurn: e.target.value })}
                    className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50"
                  />
                </label>
                <button
                  onClick={handleCreateRoom}
                  className="w-full bg-blue-500 text-white p-3 rounded-md hover:bg-blue-600 transition"
                >
                  Confirm & Create Room
                </button>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );*/
  /*const [playerName, setPlayerName] = useState('');
  const [language, setLanguage] = useState('English');
  const [roomKey, setRoomKey] = useState('');
  const [showJoinModal, setShowJoinModal] = useState(false);
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [roomSettings, setRoomSettings] = useState({
    maxPlayers: 4,
    timePerTurn: 60,
    rounds: 5,
  });

  const handleJoinRoom = () => {
    console.log('Joining room:', roomKey ? `with key ${roomKey}` : 'random room', playerName, language);
    setShowJoinModal(false);
  };

  const handleCreateRoom = () => {
    console.log('Room created:', roomSettings, playerName, language);
    setShowCreateModal(false);
  };

  return (
    <div className="flex justify-center items-center min-h-screen bg-gray-100 p-6">
      <div className="flex flex-col md:flex-row space-y-6 md:space-y-0 md:space-x-6 w-full max-w-4xl">
        <div className="flex-1 bg-white p-6 rounded-lg shadow-md">
          <h2 className="text-xl font-bold mb-4">Profile Setup</h2>
          <label className="block mb-4">
            <span className="text-gray-700">Player Name</span>
            <input
              type="text"
              value={playerName}
              onChange={(e) => setPlayerName(e.target.value)}
              placeholder="Enter your name"
              className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50"
            />
          </label>
          <label className="block">
            <span className="text-gray-700">Language</span>
            <select
              value={language}
              onChange={(e) => setLanguage(e.target.value)}
              className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50"
            >
              <option value="English">English</option>
              <option value="French">French</option>
              <option value="Spanish">Spanish</option>
            </select>
          </label>
        </div>

        <div className="flex-1 bg-white p-6 rounded-lg shadow-md">
          <h2 className="text-xl font-bold mb-4">Join or Create Room</h2>
          <button
            onClick={() => setShowJoinModal(true)}
            className="w-full bg-green-500 text-white p-3 rounded-md hover:bg-green-600 transition mb-4"
          >
            Join Room
          </button>
          <button
            onClick={() => setShowCreateModal(true)}
            className="w-full bg-blue-500 text-white p-3 rounded-md hover:bg-blue-600 transition"
          >
            Create Room
          </button>
        </div>
      </div>

      {showJoinModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50">
          <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-md">
            <h2 className="text-xl font-bold mb-4">Join Room</h2>
            <label className="block mb-4">
              <span className="text-gray-700">Room Key (Optional)</span>
              <input
                type="text"
                value={roomKey}
                onChange={(e) => setRoomKey(e.target.value)}
                placeholder="Enter room key or leave blank for random"
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50"
              />
            </label>
            <button
              onClick={handleJoinRoom}
              className="w-full bg-green-500 text-white p-3 rounded-md hover:bg-green-600 transition"
            >
              Join Room
            </button>
            <button
              onClick={() => setShowJoinModal(false)}
              className="w-full bg-gray-300 text-gray-700 p-3 rounded-md mt-4 hover:bg-gray-400 transition"
            >
              Cancel
            </button>
          </div>
        </div>
      )}

      {showCreateModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50">
          <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-md">
            <h2 className="text-xl font-bold mb-4">Create Room</h2>
            <label className="block mb-4">
              <span className="text-gray-700">Number of Rounds</span>
              <input
                type="number"
                value={roomSettings.rounds}
                onChange={(e) => setRoomSettings({ ...roomSettings, rounds: e.target.value })}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50"
              />
            </label>
            <label className="block mb-4">
              <span className="text-gray-700">Max Players</span>
              <input
                type="number"
                value={roomSettings.maxPlayers}
                onChange={(e) => setRoomSettings({ ...roomSettings, maxPlayers: e.target.value })}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50"
              />
            </label>
            <label className="block mb-4">
              <span className="text-gray-700">Time per Turn (seconds)</span>
              <input
                type="number"
                value={roomSettings.timePerTurn}
                onChange={(e) => setRoomSettings({ ...roomSettings, timePerTurn: e.target.value })}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50"
              />
            </label>
            <button
              onClick={handleCreateRoom}
              className="w-full bg-blue-500 text-white p-3 rounded-md hover:bg-blue-600 transition"
            >
              Confirm & Create Room
            </button>
            <button
              onClick={() => setShowCreateModal(false)}
              className="w-full bg-gray-300 text-gray-700 p-3 rounded-md mt-4 hover:bg-gray-400 transition"
            >
              Cancel
            </button>
          </div>
        </div>
      )}
    </div>
  );*/
  /*const [skinColor, setSkinColor] = useState('#f5c6a5'); // Default skin color
  const [eyeStyle, setEyeStyle] = useState('eyes1'); // Default eye style
  const [mouthStyle, setMouthStyle] = useState('mouth1'); // Default mouth style

  const skinColors = ['#f5c6a5', '#d9a066', '#ac7c47', '#59332e', '#8e562e']; // Sample skin tones
  const eyesOptions = ['eyes1', 'eyes2', 'eyes3']; // Different eye styles
  const mouthOptions = ['mouth1', 'mouth2', 'mouth3']; // Different mouth styles

  return (
    <div className="flex flex-col items-center min-h-screen bg-gray-100 p-6">
      <h1 className="text-2xl font-bold mb-6">Character Customization</h1>

      <div className="relative w-48 h-48 mb-6">
        <div
          className="absolute inset-0 rounded-full"
          style={{ backgroundColor: skinColor }}
        ></div>
        <div className={`absolute inset-0 ${eyeStyle}`}></div>
        <div className={`absolute inset-0 ${mouthStyle}`}></div>
      </div>

      <div className="mb-6">
        <h2 className="text-xl font-bold mb-2">Skin Color</h2>
        <div className="flex space-x-3">
          {skinColors.map((color) => (
            <button
              key={color}
              onClick={() => setSkinColor(color)}
              className={`w-8 h-8 rounded-full`}
              style={{ backgroundColor: color }}
            ></button>
          ))}
        </div>
      </div>

      <div className="mb-6">
        <h2 className="text-xl font-bold mb-2">Eyes</h2>
        <div className="flex space-x-3">
          {eyesOptions.map((eyes) => (
            <button
              key={eyes}
              onClick={() => setEyeStyle(eyes)}
              className={`w-16 h-16 rounded-md border-2 border-gray-300 hover:border-blue-500`}
            >
              <div className={`${eyes} w-full h-full`}></div>
            </button>
          ))}
        </div>
      </div>

      <div className="mb-6">
        <h2 className="text-xl font-bold mb-2">Mouth</h2>
        <div className="flex space-x-3">
          {mouthOptions.map((mouth) => (
            <button
              key={mouth}
              onClick={() => setMouthStyle(mouth)}
              className={`w-16 h-16 rounded-md border-2 border-gray-300 hover:border-blue-500`}
            >
              <div className={`${mouth} w-full h-full`}></div>
            </button>
          ))}
        </div>
      </div>

      <button
        onClick={() => alert('Character saved!')}
        className="bg-green-500 text-white px-6 py-3 rounded-lg hover:bg-green-600 transition"
      >
        Save Character
      </button>
    </div>
  );*/

  const [bgIndex, setBgIndex] = useState(1);
  const bgImages = [
    "background.png",
    "background-1.png",
  ];

  useEffect(() => {
    const interval = setInterval(() => {
      setBgIndex((prev) => (prev === bgImages.length - 1 ? 0 : prev + 1));
    }, 5000);

    return () => clearInterval(interval);
  }, []);

  return (
    <div
      style={{ '--image-url': `url(${bgImages[bgIndex]})` } as React.CSSProperties}
      className={`w-100 h-screen flex justify-center items-center flex-col overflow-hidden bg-[url('background.png')]`}
    >
      <h1 className="text-5xl font-bold text-center bg-white border border-gray-400 p-2 rounded-md shadow-md font-patrick-hand">
        <span className="text-red-500 border-b-2 border-red-700">D</span>
        <span className="text-green-500 border-b-2 border-green-700">r</span>
        <span className="text-blue-500 border-b-2 border-blue-700">a</span>
        <span className="text-yellow-500 border-b-2 border-yellow-700">w</span>
        <span className="text-purple-500 border-b-2 border-purple-700">i</span>
        <span className="text-orange-500 border-b-2 border-orange-700">n</span>
        <span className="text-pink-500 border-b-2 border-pink-700">g</span>
        <span className="text-teal-500 border-b-2 border-teal-700">T</span>
        <span className="text-indigo-500 border-b-2 border-indigo-700">o</span>
        <span className="text-lime-500 border-b-2 border-lime-700">g</span>
        <span className="text-cyan-500 border-b-2 border-cyan-700">e</span>
        <span className="text-gray-500 border-b-2 border-gray-700">t</span>
        <span className="text-red-500 border-b-2 border-red-700">h</span>
        <span className="text-green-500 border-b-2 border-green-700">e</span>
        <span className="text-blue-500 border-b-2 border-blue-700">r</span>
      </h1>
    </div>
  );














  const [playerName, setPlayerName] = useState('');
  const [language, setLanguage] = useState('English');
  const [showJoinOptions, setShowJoinOptions] = useState(false);
  const [showCreateOptions, setShowCreateOptions] = useState(false);
  const [roomKey, setRoomKey] = useState('');
  const [roomSettings, setRoomSettings] = useState({
    maxPlayers: 4,
    timePerTurn: 60,
    rounds: 5,
  });

  const handleCreateRoom = () => {
    console.log('Room created with settings:', roomSettings, 'Player:', playerName, 'Language:', language);
  };

  const handleJoinRoom = () => {
    if (roomKey) {
      console.log('Joining room with key:', roomKey, 'Player:', playerName, 'Language:', language);
    } else {
      console.log('Joining a random room. Player:', playerName, 'Language:', language);
    }
  };

  return (
    <main className="flex flex-col items-center justify-center min-h-screen text-base-content px-4">
      <header className="mb-8 text-center">
        <h1 className="text-5xl font-bold text-center bg-white border border-gray-400 p-2 rounded-md shadow-md font-patrick-hand">
          <span className="text-red-500 border-b-2 border-red-700">D</span>
          <span className="text-green-500 border-b-2 border-green-700">r</span>
          <span className="text-blue-500 border-b-2 border-blue-700">a</span>
          <span className="text-yellow-500 border-b-2 border-yellow-700">w</span>
          <span className="text-purple-500 border-b-2 border-purple-700">i</span>
          <span className="text-orange-500 border-b-2 border-orange-700">n</span>
          <span className="text-pink-500 border-b-2 border-pink-700">g</span>
          <span className="text-teal-500 border-b-2 border-teal-700">T</span>
          <span className="text-indigo-500 border-b-2 border-indigo-700">o</span>
          <span className="text-lime-500 border-b-2 border-lime-700">g</span>
          <span className="text-cyan-500 border-b-2 border-cyan-700">e</span>
          <span className="text-gray-500 border-b-2 border-gray-700">t</span>
          <span className="text-red-500 border-b-2 border-red-700">h</span>
          <span className="text-green-500 border-b-2 border-green-700">e</span>
          <span className="text-blue-500 border-b-2 border-blue-700">r</span>
        </h1>
      </header>
      <div className="w-full max-w-md p-6 bg-white rounded-lg shadow-md">
        <h2 className="text-2xl font-bold mb-4 text-center">Welcome to the Game</h2>

        <label className="block mb-4">
          <span className="text-gray-700">Player Name</span>
          <input
            type="text"
            value={playerName}
            onChange={(e) => setPlayerName(e.target.value)}
            placeholder="Enter your name"
            className="w-full p-2 mb-4 border border-gray-300 rounded-md"
            />
        </label>

        <label className="block mb-4">
          <span className="text-gray-700">Language</span>
          <select
            value={language}
            onChange={(e) => setLanguage(e.target.value)}
            className="w-full p-2 mb-4 border border-gray-300 rounded-md"
            >
            <option value="English">English</option>
            <option value="French">French</option>
            <option value="Spanish">Spanish</option>
          </select>
        </label>

        {!showJoinOptions && !showCreateOptions && (
          <div className="flex gap-4">
            <button
              onClick={() => setShowJoinOptions(true)}
              className="w-full bg-green-500 text-white p-3 rounded-md hover:bg-green-600 transition"
            >
              Join Room
            </button>
            <button
              onClick={() => setShowCreateOptions(true)}
              className="w-full bg-blue-500 text-white p-3 rounded-md hover:bg-blue-600 transition"
            >
              Create Room
            </button>
          </div>
        )}

        {showJoinOptions && (
          <div className="mt-4">
            <h3 className="text-xl font-semibold mb-2">Join a Room</h3>
            <label className="block mb-4">
              <span className="text-gray-700">Room Key (Optional)</span>
              <input
                type="text"
                value={roomKey}
                onChange={(e) => setRoomKey(e.target.value)}
                placeholder="Enter room key or leave blank for random"
                className="w-full p-2 mb-4 border border-gray-300 rounded-md"
              />
            </label>
            <button
              onClick={handleJoinRoom}
              className="w-full bg-green-500 text-white p-3 rounded-md hover:bg-green-600 transition"
            >
              Join Room
            </button>
            <button
              onClick={() => setShowJoinOptions(false)}
              className="w-full bg-gray-500 text-white p-3 rounded-md hover:bg-gray-600 transition mt-2"
            >
              Back
            </button>
          </div>
        )}

        {showCreateOptions && (
          <div className="mt-4">
            <h3 className="text-xl font-semibold mb-2">Create a Room</h3>

            <label className="block mb-4">
              <span className="text-gray-700">Number of Players</span>
              <select
                name="maxPlayers"
                value={roomSettings.maxPlayers}
                onChange={(e) => setRoomSettings({ ...roomSettings, maxPlayers: e.target.value })}
                className="w-full p-2 mb-4 border border-gray-300 rounded-md"
              >
                {[2, 3, 4, 5, 6, 7, 8].map((num) => (
                  <option key={num} value={num}>
                    {num}
                  </option>
                ))}
              </select>
            </label>

            <label className="block mb-4">
              <span className="text-gray-700">Time per Turn (seconds)</span>
              <input
                type="number"
                value={roomSettings.timePerTurn}
                onChange={(e) => setRoomSettings({ ...roomSettings, timePerTurn: e.target.value })}
                className="w-full p-2 mb-4 border border-gray-300 rounded-md"
              />
            </label>

            <label className="block mb-4">
              <span className="text-gray-700">Number of Rounds</span>
              <input
                type="number"
                value={roomSettings.rounds}
                onChange={(e) => setRoomSettings({ ...roomSettings, rounds: e.target.value })}
                className="w-full p-2 mb-4 border border-gray-300 rounded-md"
              />
            </label>

            <button
              onClick={handleCreateRoom}
              className="w-full bg-blue-500 text-white p-3 rounded-md hover:bg-blue-600 transition"
            >
              Create Room
            </button>
            <button
              onClick={() => setShowCreateOptions(false)}
              className="w-full bg-gray-500 text-white p-3 rounded-md hover:bg-gray-600 transition mt-2"
            >
              Back
            </button>
          </div>
        )}
      </div>
    </main>
  );






































  <main className="flex flex-col items-center justify-center min-h-screen text-base-content px-4">
  <header className="mb-8 text-center w-full">
    <h1 className="text-5xl font-bold text-center bg-white border border-gray-400 p-2 rounded-md shadow-md font-patrick-hand">
      <span className="text-red-500 border-b-2 border-red-700">D</span>
      <span className="text-green-500 border-b-2 border-green-700">r</span>
      <span className="text-blue-500 border-b-2 border-blue-700">a</span>
      <span className="text-yellow-500 border-b-2 border-yellow-700">w</span>
      <span className="text-purple-500 border-b-2 border-purple-700">i</span>
      <span className="text-orange-500 border-b-2 border-orange-700">n</span>
      <span className="text-pink-500 border-b-2 border-pink-700">g</span>
      <span className="text-teal-500 border-b-2 border-teal-700">T</span>
      <span className="text-indigo-500 border-b-2 border-indigo-700">o</span>
      <span className="text-lime-500 border-b-2 border-lime-700">g</span>
      <span className="text-cyan-500 border-b-2 border-cyan-700">e</span>
      <span className="text-gray-500 border-b-2 border-gray-700">t</span>
      <span className="text-red-500 border-b-2 border-red-700">h</span>
      <span className="text-green-500 border-b-2 border-green-700">e</span>
      <span className="text-blue-500 border-b-2 border-blue-700">r</span>
    </h1>
  </header>

  <main className="flex flex-col md:flex-row space-y-6 md:space-y-0 md:space-x-10">
    <div className="w-full p-6 bg-white rounded-lg shadow-lg">
      <input
        type="text"
        placeholder="Nom du joueur"
        value={playerName}
        onChange={(e) => setPlayerName(e.target.value)}
        className="w-full p-2 mb-4 border border-gray-300 rounded-md"
      />
      <button
        onClick={createRoom}
        className="w-full mt-4 bg-blue-500 hover:bg-blue-600 text-white py-2 rounded-md"
      >
        Play!
      </button>
      <button
        onClick={createRoom}
        className="w-full mt-4 bg-blue-500 hover:bg-blue-600 text-white py-2 rounded-md"
      >
        Create Private Room
      </button>
    </div>

    {/*<div className="w-full md:w-96 p-6 bg-white rounded-lg shadow-lg">
      <h2 className="text-xl md:text-2xl font-semibold mb-4">Rejoindre une Salle</h2>
      <ul className="mb-4">
        {Object.keys(availableRooms).map((room) => (
          availableRooms[room].roomSettings.private === false && (
            <li key={room} className="flex justify-between items-center">
              <span>{room}</span>
              <button
                onClick={() => joinRoom(room)}
                className="ml-4 bg-green-500 hover:bg-green-600 text-white py-1 px-2 rounded-md"
              >
                Rejoindre
              </button>
            </li>
          )
        ))}
      </ul>
    </div>*/}
  </main>
</main>

